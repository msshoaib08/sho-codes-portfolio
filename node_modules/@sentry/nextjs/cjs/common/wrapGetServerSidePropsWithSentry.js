var {
  _nullishCoalesce
} = require('@sentry/utils');

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('@sentry/core');
const utils = require('@sentry/utils');
const isBuild = require('./utils/isBuild.js');
const wrapperUtils = require('./utils/wrapperUtils.js');

/**
 * Create a wrapped version of the user's exported `getServerSideProps` function
 *
 * @param origGetServerSideProps The user's `getServerSideProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapGetServerSidePropsWithSentry(
  origGetServerSideProps,
  parameterizedRoute,
) {
  return new Proxy(origGetServerSideProps, {
    apply: async (wrappingTarget, thisArg, args) => {
      if (isBuild.isBuild()) {
        return wrappingTarget.apply(thisArg, args);
      }

      const [context] = args;
      const { req, res } = context;

      const errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);
      const tracedGetServerSideProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {
        dataFetcherRouteName: parameterizedRoute,
        requestedRouteName: parameterizedRoute,
        dataFetchingMethodName: 'getServerSideProps',
      });

      const serverSideProps = await (tracedGetServerSideProps.apply(thisArg, args)

);

      if (serverSideProps && 'props' in serverSideProps) {
        const activeSpan = core.getActiveSpan();
        const requestSpan = _nullishCoalesce(wrapperUtils.getSpanFromRequest(req), () => ( (activeSpan ? core.getRootSpan(activeSpan) : undefined)));
        if (requestSpan) {
          const sentryTrace = core.spanToTraceHeader(requestSpan);

          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)
          if (sentryTrace) {
            (serverSideProps.props )._sentryTraceData = sentryTrace;
          }

          const dynamicSamplingContext = core.getDynamicSamplingContextFromSpan(requestSpan);
          const baggage = utils.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)
          if (baggage) {
            (serverSideProps.props )._sentryBaggage = baggage;
          }
        }
      }

      return serverSideProps;
    },
  });
}

exports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry;
//# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map
