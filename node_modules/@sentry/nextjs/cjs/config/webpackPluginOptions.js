var {
  _nullishCoalesce,
  _optionalChain
} = require('@sentry/utils');

Object.defineProperty(exports, '__esModule', { value: true });

const path = require('path');
const node = require('@sentry/node');

/**
 * Combine default and user-provided SentryWebpackPlugin options, accounting for whether we're building server files or
 * client files.
 */
function getWebpackPluginOptions(
  buildContext,
  sentryBuildOptions,
) {
  const { buildId, isServer, config: userNextConfig, dir: projectDir, nextRuntime } = buildContext;

  const prefixInsert = !isServer ? 'Client' : nextRuntime === 'edge' ? 'Edge' : 'Node.js';

  const distDirAbsPath = path.join(projectDir, (userNextConfig ).distDir || '.next'); // `.next` is the default directory

  let sourcemapUploadAssets = [];
  const sourcemapUploadIgnore = [];

  if (isServer) {
    sourcemapUploadAssets.push(
      path.join(distDirAbsPath, 'server', '**'), // This is normally where Next.js outputs things
      path.join(distDirAbsPath, 'serverless', '**'), // This was the output location for serverless Next.js
    );
  } else {
    if (sentryBuildOptions.widenClientFileUpload) {
      sourcemapUploadAssets.push(path.join(distDirAbsPath, 'static', 'chunks', '**'));
    } else {
      sourcemapUploadAssets.push(
        path.join(distDirAbsPath, 'static', 'chunks', 'pages', '**'),
        path.join(distDirAbsPath, 'static', 'chunks', 'app', '**'),
      );
    }

    // TODO: We should think about uploading these when `widenClientFileUpload` is `true`. They may be useful in some situations.
    sourcemapUploadIgnore.push(
      path.join(distDirAbsPath, 'static', 'chunks', 'framework-*'),
      path.join(distDirAbsPath, 'static', 'chunks', 'framework.*'),
      path.join(distDirAbsPath, 'static', 'chunks', 'main-*'),
      path.join(distDirAbsPath, 'static', 'chunks', 'polyfills-*'),
      path.join(distDirAbsPath, 'static', 'chunks', 'webpack-*'),
    );
  }

  if (_optionalChain([sentryBuildOptions, 'access', _ => _.sourcemaps, 'optionalAccess', _2 => _2.disable])) {
    sourcemapUploadAssets = [];
  }

  return {
    authToken: sentryBuildOptions.authToken,
    headers: sentryBuildOptions.headers,
    org: sentryBuildOptions.org,
    project: sentryBuildOptions.project,
    telemetry: sentryBuildOptions.telemetry,
    debug: sentryBuildOptions.debug,
    reactComponentAnnotation: {
      ...sentryBuildOptions.reactComponentAnnotation,
      ..._optionalChain([sentryBuildOptions, 'access', _3 => _3.unstable_sentryWebpackPluginOptions, 'optionalAccess', _4 => _4.reactComponentAnnotation]),
    },
    silent: sentryBuildOptions.silent,
    url: sentryBuildOptions.sentryUrl,
    sourcemaps: {
      rewriteSources(source) {
        if (source.startsWith('webpack://_N_E/')) {
          return source.replace('webpack://_N_E/', '');
        } else if (source.startsWith('webpack://')) {
          return source.replace('webpack://', '');
        } else {
          return source;
        }
      },
      assets: _nullishCoalesce(_optionalChain([sentryBuildOptions, 'access', _5 => _5.sourcemaps, 'optionalAccess', _6 => _6.assets]), () => ( sourcemapUploadAssets)),
      ignore: _nullishCoalesce(_optionalChain([sentryBuildOptions, 'access', _7 => _7.sourcemaps, 'optionalAccess', _8 => _8.ignore]), () => ( sourcemapUploadIgnore)),
      // TODO: Add this functionality
      // filesToDeleteAfterUpload: sentryBuildOptions.sourcemaps?.deleteSourcemapsAfterUpload
      //   ? path.join(distDirAbsPath, '**', '*.js.map')
      //   : undefined,
      ..._optionalChain([sentryBuildOptions, 'access', _9 => _9.unstable_sentryWebpackPluginOptions, 'optionalAccess', _10 => _10.sourcemaps]),
    },
    release: {
      inject: false, // The webpack plugin's release injection breaks the `app` directory - we inject the release manually with the value injection loader instead.
      name: _nullishCoalesce(_optionalChain([sentryBuildOptions, 'access', _11 => _11.release, 'optionalAccess', _12 => _12.name]), () => ( node.getSentryRelease(buildId))),
      create: _optionalChain([sentryBuildOptions, 'access', _13 => _13.release, 'optionalAccess', _14 => _14.create]),
      finalize: _optionalChain([sentryBuildOptions, 'access', _15 => _15.release, 'optionalAccess', _16 => _16.finalize]),
      dist: _optionalChain([sentryBuildOptions, 'access', _17 => _17.release, 'optionalAccess', _18 => _18.dist]),
      vcsRemote: _optionalChain([sentryBuildOptions, 'access', _19 => _19.release, 'optionalAccess', _20 => _20.vcsRemote]),
      setCommits: _optionalChain([sentryBuildOptions, 'access', _21 => _21.release, 'optionalAccess', _22 => _22.setCommits]),
      deploy: _optionalChain([sentryBuildOptions, 'access', _23 => _23.release, 'optionalAccess', _24 => _24.deploy]),
      ..._optionalChain([sentryBuildOptions, 'access', _25 => _25.unstable_sentryWebpackPluginOptions, 'optionalAccess', _26 => _26.release]),
    },
    _metaOptions: {
      loggerPrefixOverride: `[@sentry/nextjs - ${prefixInsert}]`,
    },
    ...sentryBuildOptions.unstable_sentryWebpackPluginOptions,
  };
}

exports.getWebpackPluginOptions = getWebpackPluginOptions;
//# sourceMappingURL=webpackPluginOptions.js.map
