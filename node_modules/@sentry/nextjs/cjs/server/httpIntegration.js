Object.defineProperty(exports, '__esModule', { value: true });

const instrumentationHttp = require('@opentelemetry/instrumentation-http');
const node = require('@sentry/node');

/**
 * Next.js handles incoming requests itself,
 * but it does not handle outgoing requests.
 * Today, it is not possible to use the HttpInstrumentation for only outgoing requests -
 * until https://github.com/open-telemetry/opentelemetry-js/pull/4643 is merged & released.
 * So in the meanwhile, we extend the base HttpInstrumentation to not wrap incoming requests.
 */
class CustomNextjsHttpIntegration extends instrumentationHttp.HttpInstrumentation {
  // Instead of the default behavior, we just don't do any wrapping for incoming requests
   _getPatchIncomingRequestFunction(_component) {
    return (
      original,
    ) => {
      return function incomingRequest( event, ...args) {
        return original.apply(this, [event, ...args]);
      };
    };
  }
}

/**
 * The http integration instruments Node's internal http and https modules.
 * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.
 */
const httpIntegration = ((options = {}) => {
  return node.httpIntegration({
    ...options,
    _instrumentation: CustomNextjsHttpIntegration,
  });
}) ;

exports.httpIntegration = httpIntegration;
//# sourceMappingURL=httpIntegration.js.map
