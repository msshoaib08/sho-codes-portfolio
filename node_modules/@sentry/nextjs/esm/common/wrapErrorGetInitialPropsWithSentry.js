import { _nullishCoalesce } from '@sentry/utils';
import { getActiveSpan, spanToTraceHeader, getDynamicSamplingContextFromSpan, getRootSpan } from '@sentry/core';
import { dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';
import { isBuild } from './utils/isBuild.js';
import { withTracedServerSideDataFetcher, getSpanFromRequest, withErrorInstrumentation } from './utils/wrapperUtils.js';

/**
 * Create a wrapped version of the user's exported `getInitialProps` function in
 * a custom error page ("_error.js").
 *
 * @param origErrorGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapErrorGetInitialPropsWithSentry(
  origErrorGetInitialProps,
) {
  return new Proxy(origErrorGetInitialProps, {
    apply: async (wrappingTarget, thisArg, args) => {
      if (isBuild()) {
        return wrappingTarget.apply(thisArg, args);
      }

      const [context] = args;
      const { req, res } = context;

      const errorWrappedGetInitialProps = withErrorInstrumentation(wrappingTarget);
      // Generally we can assume that `req` and `res` are always defined on the server:
      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher
      // span with each other when there are no req or res objects, we simply do not trace them at all here.
      if (req && res) {
        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {
          dataFetcherRouteName: '/_error',
          requestedRouteName: context.pathname,
          dataFetchingMethodName: 'getInitialProps',
        });

        const errorGetInitialProps

 = await tracedGetInitialProps.apply(thisArg, args);

        const activeSpan = getActiveSpan();
        const requestSpan = _nullishCoalesce(getSpanFromRequest(req), () => ( (activeSpan ? getRootSpan(activeSpan) : undefined)));

        if (requestSpan) {
          const sentryTrace = spanToTraceHeader(requestSpan);

          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)
          if (sentryTrace) {
            errorGetInitialProps._sentryTraceData = sentryTrace;
          }

          const dynamicSamplingContext = getDynamicSamplingContextFromSpan(requestSpan);
          const baggage = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);

          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)
          if (baggage) {
            errorGetInitialProps._sentryBaggage = baggage;
          }
        }

        return errorGetInitialProps;
      } else {
        return errorWrappedGetInitialProps.apply(thisArg, args);
      }
    },
  });
}

export { wrapErrorGetInitialPropsWithSentry };
//# sourceMappingURL=wrapErrorGetInitialPropsWithSentry.js.map
