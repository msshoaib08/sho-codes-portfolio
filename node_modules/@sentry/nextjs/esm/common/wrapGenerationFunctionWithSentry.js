import { _optionalChain } from '@sentry/utils';
import { getActiveSpan, getClient, withIsolationScope, withScope, startSpanManual, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, handleCallbackErrors, SPAN_STATUS_ERROR, SPAN_STATUS_OK, captureException } from '@sentry/core';
import { winterCGHeadersToDict, propagationContextFromHeaders, uuid4 } from '@sentry/utils';
import { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils.js';
import { escapeNextjsTracing, commonObjectToIsolationScope, commonObjectToPropagationContext } from './utils/tracingUtils.js';

/**
 * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function wrapGenerationFunctionWithSentry(
  generationFunction,
  context,
) {
  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;
  return new Proxy(generationFunction, {
    apply: (originalFunction, thisArg, args) => {
      const requestTraceId = _optionalChain([getActiveSpan, 'call', _ => _(), 'optionalAccess', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.traceId]);
      return escapeNextjsTracing(() => {
        let headers = undefined;
        // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API
        try {
          headers = _optionalChain([requestAsyncStorage, 'optionalAccess', _5 => _5.getStore, 'call', _6 => _6(), 'optionalAccess', _7 => _7.headers]);
        } catch (e) {
          /** empty */
        }

        let data = undefined;
        if (_optionalChain([getClient, 'call', _8 => _8(), 'optionalAccess', _9 => _9.getOptions, 'call', _10 => _10(), 'access', _11 => _11.sendDefaultPii])) {
          const props = args[0];
          const params = props && typeof props === 'object' && 'params' in props ? props.params : undefined;
          const searchParams =
            props && typeof props === 'object' && 'searchParams' in props ? props.searchParams : undefined;
          data = { params, searchParams };
        }

        const headersDict = headers ? winterCGHeadersToDict(headers) : undefined;

        const isolationScope = commonObjectToIsolationScope(headers);

        return withIsolationScope(isolationScope, () => {
          return withScope(scope => {
            scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);

            isolationScope.setSDKProcessingMetadata({
              request: {
                headers: headersDict,
              },
            });

            const propagationContext = commonObjectToPropagationContext(
              headers,
              _optionalChain([headersDict, 'optionalAccess', _12 => _12['sentry-trace']])
                ? propagationContextFromHeaders(headersDict['sentry-trace'], headersDict['baggage'])
                : {
                    traceId: requestTraceId || uuid4(),
                    spanId: uuid4().substring(16),
                  },
            );

            scope.setExtra('route_data', data);
            scope.setPropagationContext(propagationContext);

            return startSpanManual(
              {
                op: 'function.nextjs',
                name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,
                forceTransaction: true,
                attributes: {
                  [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',
                  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',
                },
              },
              span => {
                return handleCallbackErrors(
                  () => originalFunction.apply(thisArg, args),
                  err => {
                    if (isNotFoundNavigationError(err)) {
                      // We don't want to report "not-found"s
                      span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });
                    } else if (isRedirectNavigationError(err)) {
                      // We don't want to report redirects
                      span.setStatus({ code: SPAN_STATUS_OK });
                    } else {
                      span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });
                      captureException(err, {
                        mechanism: {
                          handled: false,
                        },
                      });
                    }
                  },
                  () => {
                    span.end();
                  },
                );
              },
            );
          });
        });
      });
    },
  });
}

export { wrapGenerationFunctionWithSentry };
//# sourceMappingURL=wrapGenerationFunctionWithSentry.js.map
