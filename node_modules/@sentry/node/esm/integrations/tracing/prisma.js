import { _optionalChain } from '@sentry/utils';
import * as prismaInstrumentation from '@prisma/instrumentation';
import { defineIntegration, spanToJSON, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';
import { addOpenTelemetryInstrumentation } from '@sentry/opentelemetry';

const _prismaIntegration = (() => {
  return {
    name: 'Prisma',
    setupOnce() {
      addOpenTelemetryInstrumentation(
        // does not have a hook to adjust spans & add origin
        new prismaInstrumentation.PrismaInstrumentation({}),
      );
    },

    setup(client) {
      client.on('spanStart', span => {
        const spanJSON = spanToJSON(span);
        if (_optionalChain([spanJSON, 'access', _ => _.description, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('prisma:')])) {
          span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');
        }

        if (spanJSON.description === 'prisma:engine:db_query') {
          span.setAttribute('db.system', 'prisma');
        }
      });
    },
  };
}) ;

/**
 * Prisma integration
 *
 * Capture tracing data for prisma.
 * Note: This requieres to set:
 * previewFeatures = ["tracing"]
 * For the prisma client.
 * See https://www.prisma.io/docs/concepts/components/prisma-client/opentelemetry-tracing for more details.
 */
const prismaIntegration = defineIntegration(_prismaIntegration);

export { prismaIntegration };
//# sourceMappingURL=prisma.js.map
